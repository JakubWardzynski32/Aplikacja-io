#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aplikacja_io
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Users")]
	public partial class UsersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSkladnik(Skladnik instance);
    partial void UpdateSkladnik(Skladnik instance);
    partial void DeleteSkladnik(Skladnik instance);
    partial void InsertPrzepis(Przepis instance);
    partial void UpdatePrzepis(Przepis instance);
    partial void DeletePrzepis(Przepis instance);
    partial void InsertPS(PS instance);
    partial void UpdatePS(PS instance);
    partial void DeletePS(PS instance);
    #endregion
		
		public UsersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UsersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Skladnik> Skladnik
		{
			get
			{
				return this.GetTable<Skladnik>();
			}
		}
		
		public System.Data.Linq.Table<Przepis> Przepis
		{
			get
			{
				return this.GetTable<Przepis>();
			}
		}
		
		public System.Data.Linq.Table<PS> PS
		{
			get
			{
				return this.GetTable<PS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Imie;
		
		private string _Nazwisko;
		
		private string _Mail;
		
		private string _Login;
		
		private string _Haslo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImieChanging(string value);
    partial void OnImieChanged();
    partial void OnNazwiskoChanging(string value);
    partial void OnNazwiskoChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnHasloChanging(string value);
    partial void OnHasloChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Imie", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Imie
		{
			get
			{
				return this._Imie;
			}
			set
			{
				if ((this._Imie != value))
				{
					this.OnImieChanging(value);
					this.SendPropertyChanging();
					this._Imie = value;
					this.SendPropertyChanged("Imie");
					this.OnImieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazwisko", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nazwisko
		{
			get
			{
				return this._Nazwisko;
			}
			set
			{
				if ((this._Nazwisko != value))
				{
					this.OnNazwiskoChanging(value);
					this.SendPropertyChanging();
					this._Nazwisko = value;
					this.SendPropertyChanged("Nazwisko");
					this.OnNazwiskoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Haslo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Haslo
		{
			get
			{
				return this._Haslo;
			}
			set
			{
				if ((this._Haslo != value))
				{
					this.OnHasloChanging(value);
					this.SendPropertyChanging();
					this._Haslo = value;
					this.SendPropertyChanged("Haslo");
					this.OnHasloChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skladnik")]
	public partial class Skladnik : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Opis;
		
		private string _Nazwa;
		
		private EntitySet<PS> _PS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOpisChanging(string value);
    partial void OnOpisChanged();
    partial void OnNazwaChanging(string value);
    partial void OnNazwaChanged();
    #endregion
		
		public Skladnik()
		{
			this._PS = new EntitySet<PS>(new Action<PS>(this.attach_PS), new Action<PS>(this.detach_PS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Opis", DbType="VarChar(50)")]
		public string Opis
		{
			get
			{
				return this._Opis;
			}
			set
			{
				if ((this._Opis != value))
				{
					this.OnOpisChanging(value);
					this.SendPropertyChanging();
					this._Opis = value;
					this.SendPropertyChanged("Opis");
					this.OnOpisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazwa", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nazwa
		{
			get
			{
				return this._Nazwa;
			}
			set
			{
				if ((this._Nazwa != value))
				{
					this.OnNazwaChanging(value);
					this.SendPropertyChanging();
					this._Nazwa = value;
					this.SendPropertyChanged("Nazwa");
					this.OnNazwaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skladnik_PS", Storage="_PS", ThisKey="Id", OtherKey="Id_skladnika")]
		public EntitySet<PS> PS
		{
			get
			{
				return this._PS;
			}
			set
			{
				this._PS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PS(PS entity)
		{
			this.SendPropertyChanging();
			entity.Skladnik = this;
		}
		
		private void detach_PS(PS entity)
		{
			this.SendPropertyChanging();
			entity.Skladnik = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Przepis")]
	public partial class Przepis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nazwa;
		
		private string _Opis;
		
		private EntitySet<PS> _PS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNazwaChanging(string value);
    partial void OnNazwaChanged();
    partial void OnOpisChanging(string value);
    partial void OnOpisChanged();
    #endregion
		
		public Przepis()
		{
			this._PS = new EntitySet<PS>(new Action<PS>(this.attach_PS), new Action<PS>(this.detach_PS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazwa", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nazwa
		{
			get
			{
				return this._Nazwa;
			}
			set
			{
				if ((this._Nazwa != value))
				{
					this.OnNazwaChanging(value);
					this.SendPropertyChanging();
					this._Nazwa = value;
					this.SendPropertyChanged("Nazwa");
					this.OnNazwaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Opis", DbType="VarChar(50)")]
		public string Opis
		{
			get
			{
				return this._Opis;
			}
			set
			{
				if ((this._Opis != value))
				{
					this.OnOpisChanging(value);
					this.SendPropertyChanging();
					this._Opis = value;
					this.SendPropertyChanged("Opis");
					this.OnOpisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Przepis_PS", Storage="_PS", ThisKey="Id", OtherKey="Id_przepisu")]
		public EntitySet<PS> PS
		{
			get
			{
				return this._PS;
			}
			set
			{
				this._PS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PS(PS entity)
		{
			this.SendPropertyChanging();
			entity.Przepis = this;
		}
		
		private void detach_PS(PS entity)
		{
			this.SendPropertyChanging();
			entity.Przepis = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PS")]
	public partial class PS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ilosc;
		
		private int _Id_przepisu;
		
		private int _Id_skladnika;
		
		private EntityRef<Przepis> _Przepis;
		
		private EntityRef<Skladnik> _Skladnik;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIloscChanging(int value);
    partial void OnIloscChanged();
    partial void OnId_przepisuChanging(int value);
    partial void OnId_przepisuChanged();
    partial void OnId_skladnikaChanging(int value);
    partial void OnId_skladnikaChanged();
    #endregion
		
		public PS()
		{
			this._Przepis = default(EntityRef<Przepis>);
			this._Skladnik = default(EntityRef<Skladnik>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ilosc", DbType="Int NOT NULL")]
		public int Ilosc
		{
			get
			{
				return this._Ilosc;
			}
			set
			{
				if ((this._Ilosc != value))
				{
					this.OnIloscChanging(value);
					this.SendPropertyChanging();
					this._Ilosc = value;
					this.SendPropertyChanged("Ilosc");
					this.OnIloscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_przepisu", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_przepisu
		{
			get
			{
				return this._Id_przepisu;
			}
			set
			{
				if ((this._Id_przepisu != value))
				{
					if (this._Przepis.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_przepisuChanging(value);
					this.SendPropertyChanging();
					this._Id_przepisu = value;
					this.SendPropertyChanged("Id_przepisu");
					this.OnId_przepisuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_skladnika", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id_skladnika
		{
			get
			{
				return this._Id_skladnika;
			}
			set
			{
				if ((this._Id_skladnika != value))
				{
					if (this._Skladnik.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_skladnikaChanging(value);
					this.SendPropertyChanging();
					this._Id_skladnika = value;
					this.SendPropertyChanged("Id_skladnika");
					this.OnId_skladnikaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Przepis_PS", Storage="_Przepis", ThisKey="Id_przepisu", OtherKey="Id", IsForeignKey=true)]
		public Przepis Przepis
		{
			get
			{
				return this._Przepis.Entity;
			}
			set
			{
				Przepis previousValue = this._Przepis.Entity;
				if (((previousValue != value) 
							|| (this._Przepis.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Przepis.Entity = null;
						previousValue.PS.Remove(this);
					}
					this._Przepis.Entity = value;
					if ((value != null))
					{
						value.PS.Add(this);
						this._Id_przepisu = value.Id;
					}
					else
					{
						this._Id_przepisu = default(int);
					}
					this.SendPropertyChanged("Przepis");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skladnik_PS", Storage="_Skladnik", ThisKey="Id_skladnika", OtherKey="Id", IsForeignKey=true)]
		public Skladnik Skladnik
		{
			get
			{
				return this._Skladnik.Entity;
			}
			set
			{
				Skladnik previousValue = this._Skladnik.Entity;
				if (((previousValue != value) 
							|| (this._Skladnik.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skladnik.Entity = null;
						previousValue.PS.Remove(this);
					}
					this._Skladnik.Entity = value;
					if ((value != null))
					{
						value.PS.Add(this);
						this._Id_skladnika = value.Id;
					}
					else
					{
						this._Id_skladnika = default(int);
					}
					this.SendPropertyChanged("Skladnik");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
